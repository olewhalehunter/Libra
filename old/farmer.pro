solution -> [initial_state]!add_to_plan^+ ?>solved.initial_state -> (everything,{}).final_state -> ({},everything).everything -> {'Farmer';'Dog';'Corn';'Chicken'}.solved -> {Plan:last(Plan)=final_state}.add_to_plan -> suggest o verify.suggest -> {Plan->Plan,last(Plan)!cross_river}.verify -> {Plan,State->Plan&&[State]:State\?codom Plan}.cross_river -> left_to_right join right_to_left.left_to_right -> farmer_on_left <? ferry_object \?> unsafe.farmer_on_left -> {Left,Right:'Farmer'?Left}.ferry_object -> {Left,Right->Left,Right,@Left}                   o{Left,Right,Choice->Left omit{Choice}omit{'Farmer'},Right join{Choice}join{'Farmer'}}.unsafe -> {Left,Right:Left includes{'Chicken';'Corn'} v Left includes{'Dog';'Chicken'}}.right_to_left -> farmer_on_left <\? swap o left_to_right o swap.swap -> {Left,Right->Right,Left}.display_seq -> speak o ({X->head(X)!write o nl,tail(X)} o {H,T->T})^^ o nl o spoken.